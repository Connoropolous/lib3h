//! Connection Error struct and TransportResult type

use tungstenite::handshake::{
    server::{NoCallback, ServerHandshake},
    HandshakeError,
};

/// a result object whos error is a TransportError instance
pub type TransportResult<T> = Result<T, TransportError>;

/// represents an error generated by a connection instance
#[derive(Debug, PartialEq, Clone)]
pub struct TransportError(pub String);

impl TransportError {
    pub fn new(msg: String) -> Self {
        TransportError(msg)
    }
}

impl std::fmt::Display for TransportError {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{:?}", self)
    }
}

impl std::error::Error for TransportError {
    fn description(&self) -> &str {
        &self.0
    }
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        None
    }
}
/*
impl From<std::io::Error> for TransportError {
    fn from(error: std::io::Error) -> Self {
        Self(format!("{:?}", error))
    }
}
*/
impl From<Vec<TransportError>> for TransportError {
    fn from(errors: Vec<TransportError>) -> Self {
        Self(format!("{:?}", errors))
    }
}

impl From<url::ParseError> for TransportError {
    fn from(error: url::ParseError) -> Self {
        Self(format!("{:?}", error))
    }
}

impl From<std::io::Error> for TransportError {
    fn from(error: std::io::Error) -> Self {
        Self(format!("{:?}", error))
    }
}

impl From<tungstenite::Error> for TransportError {
    fn from(error: tungstenite::Error) -> Self {
        Self(format!("{:?}", error))
    }
}

impl From<native_tls::Error> for TransportError {
    fn from(error: native_tls::Error) -> Self {
        Self(format!("{:?}", error))
    }
}

impl<S: std::fmt::Debug + std::io::Read + std::io::Write>
    From<HandshakeError<ServerHandshake<S, NoCallback>>> for TransportError
{
    fn from(error: HandshakeError<ServerHandshake<S, NoCallback>>) -> Self {
        Self(format!("{:?}", error))
    }
}

impl<T: std::io::Read + std::io::Write + std::fmt::Debug> From<native_tls::HandshakeError<T>>
    for TransportError
{
    fn from(error: native_tls::HandshakeError<T>) -> Self {
        Self(format!("{:?}", error))
    }
}

impl<T: std::io::Read + std::io::Write + std::fmt::Debug>
    From<tungstenite::HandshakeError<tungstenite::ClientHandshake<T>>> for TransportError
{
    fn from(error: tungstenite::HandshakeError<tungstenite::ClientHandshake<T>>) -> Self {
        Self(format!("{:?}", error))
    }
}

impl From<lib3h_protocol::error::Lib3hProtocolError> for TransportError {
    fn from(err: lib3h_protocol::error::Lib3hProtocolError) -> Self {
        Self::new(format!("{:?}", err))
    }
}

use lib3h_protocol::error::{ErrorKind as Lib3hErrorKind, Lib3hProtocolError};
impl From<TransportError> for Lib3hProtocolError {
    fn from(err: TransportError) -> Self {
        Self::new(Lib3hErrorKind::TransportError(format!("{:?}", err)))
    }
}
