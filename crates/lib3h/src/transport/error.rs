//! Connection Error struct and TransportResult type

use tungstenite::handshake::{
    server::{NoCallback, ServerHandshake},
    HandshakeError,
};

use std::io::ErrorKind::WouldBlock;

/// a result object whos error is a TransportError instance
pub type TransportResult<T> = Result<T, TransportError>;

/// represents an error generated by a connection instance
#[derive(Debug, Clone, PartialEq)]
pub struct TransportError(Box<ErrorKind>);

#[derive(Debug)]
pub enum ErrorKind {
    /// Io Error
    Io(std::io::Error),
    /// Generic error
    Other(String),
}

impl PartialEq for ErrorKind {
    fn eq(&self, other: &Self) -> bool {
        format!("{:?}", self) == format!("{:?}", other)
    }
}

impl Clone for ErrorKind {
    fn clone(&self) -> Self {
        match self {
            ErrorKind::Io(i) => ErrorKind::Io(i.kind().clone().into()),
            ErrorKind::Other(s) => ErrorKind::Other(s.clone()),
        }
    }
}

impl TransportError {
    pub fn new(kind: ErrorKind) -> Self {
        Self(Box::new(kind))
    }

    pub fn new_str(msg: String) -> Self {
        TransportError(Box::new(ErrorKind::Other(msg)))
    }

    pub fn is_io_would_block(&self) -> bool {
        if let ErrorKind::Io(i) = &*self.0 {
            return i.kind() == WouldBlock;
        }
        false
    }
}

impl std::fmt::Display for TransportError {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{:?}", self)
    }
}

impl std::error::Error for TransportError {}

impl From<String> for TransportError {
    fn from(err: String) -> Self {
        Self::new_str(err)
    }
}

impl From<&String> for TransportError {
    fn from(err: &String) -> Self {
        err.clone().into()
    }
}

impl From<&str> for TransportError {
    fn from(err: &str) -> Self {
        err.to_string().into()
    }
}

impl From<Vec<TransportError>> for TransportError {
    fn from(errors: Vec<TransportError>) -> Self {
        Self::new_str(format!("{:?}", errors))
    }
}

impl From<url::ParseError> for TransportError {
    fn from(error: url::ParseError) -> Self {
        Self::new_str(format!("{:?}", error))
    }
}

impl From<std::io::Error> for TransportError {
    fn from(error: std::io::Error) -> Self {
        Self::new(ErrorKind::Io(error))
    }
}

impl From<tungstenite::Error> for TransportError {
    fn from(error: tungstenite::Error) -> Self {
        Self::new_str(format!("{:?}", error))
    }
}

impl From<native_tls::Error> for TransportError {
    fn from(error: native_tls::Error) -> Self {
        Self::new_str(format!("{:?}", error))
    }
}

impl<S: std::fmt::Debug + std::io::Read + std::io::Write>
    From<HandshakeError<ServerHandshake<S, NoCallback>>> for TransportError
{
    fn from(error: HandshakeError<ServerHandshake<S, NoCallback>>) -> Self {
        Self::new_str(format!("{:?}", error))
    }
}

impl<T: std::io::Read + std::io::Write + std::fmt::Debug> From<native_tls::HandshakeError<T>>
    for TransportError
{
    fn from(error: native_tls::HandshakeError<T>) -> Self {
        Self::new_str(format!("{:?}", error))
    }
}

impl<T: std::io::Read + std::io::Write + std::fmt::Debug>
    From<tungstenite::HandshakeError<tungstenite::ClientHandshake<T>>> for TransportError
{
    fn from(error: tungstenite::HandshakeError<tungstenite::ClientHandshake<T>>) -> Self {
        Self::new_str(format!("{:?}", error))
    }
}

impl From<lib3h_protocol::error::Lib3hProtocolError> for TransportError {
    fn from(err: lib3h_protocol::error::Lib3hProtocolError) -> Self {
        Self::new_str(format!("{:?}", err))
    }
}

use lib3h_protocol::error::{ErrorKind as Lib3hErrorKind, Lib3hProtocolError};
impl From<TransportError> for Lib3hProtocolError {
    fn from(err: TransportError) -> Self {
        Self::new(Lib3hErrorKind::TransportError(format!("{:?}", err)))
    }
}
